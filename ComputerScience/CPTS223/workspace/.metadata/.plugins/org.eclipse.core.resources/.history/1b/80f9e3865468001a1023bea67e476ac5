#ifndef TREE_H    // include guard
#define TREE_H
///////////////////////////////////////////////////////////////////////////////
/// \class        Node
/// \author       Alex Hortin
/// \date         10/17/05
/// \brief        A node that makes up part of a tree
///
/// This class is one the stores each individual part of the tree. It stores 
/// a element, a parent pointer, and an array of pointers to all of it's 
/// children. 
///       
/// REVISION HISTORY:
///
///   NONE
///            
///////////////////////////////////////////////////////////////////////////////

// SYSTEM INCLUDES
//

#include <iostream>
#include <stdexcept>
#include <vector>
#include <string>
// LOCAL INCLUDES
//
#include "Tree.h"
// FORWARD REFERENCES
//

using std::cout;
using std::endl;
template <class Element> class Tree;
// CONSTANTS
//

//#ifndef ELEMENT_TYPE
//#include <string>
//typedef std::string Element;
//#else
//typedef ELEMENT_TYPE Element;
//#endif

template < class Element >
class cNode
{
   public:
// LIFECYCLE

   /// Default constructor.
   /// \pre    None
   /// \post   An instance of the Node class is created.
   /// \param  None
   /// \throw  None
   cNode( void );
   
   /// Copy Constructor.
   /// \pre    An instance of Node needs to be present.
   /// \post   Two instances of the same Node will exist.
   /// \param  Node is the Node to copy from.
   /// \throw  None
   cNode( const cNode & from );

   /// Destructor.
   /// \pre    An instance of Node has been created.
   /// \post   The instance of Node is destroyed.
   ~cNode( void );

// OPERATORS

// OPERATIONS 

// ACCESS and MUTATE
 
// INQUIRY  
   
// MEMBER VARIABLES
//private:
   
   //stored the element contained in the node
   Element mElement;
   
   //stores the adress of the parent node
   cNode* mParent;
   
   //stores all the nodes children
   cNode* mLeftChild;
   cNode* mRightChild;
   
}; // end of class Node


///////////////////////////////////////////////////////////////////////////////
/// \class        Position
/// \author       Alex Hortin
/// \date         10/17/05
/// \brief        A class that stores a pointer to the position.
///
/// This class is one the stores a position of a node in the tree.  It is an 
/// interface tool for the client.
///       
/// REVISION HISTORY:
///
///   NONE
///            
///////////////////////////////////////////////////////////////////////////////

// SYSTEM INCLUDES
//

// LOCAL INCLUDES
//

// FORWARD REFERENCES
//
template <class Element> class Tree;

// CONSTANTS
//
template < class Element >
class cPosition
{
   public:
   friend class Tree< Element >;
// LIFECYCLE

   /// Default constructor.
   /// \pre    None
   /// \post   An instance of the Position class with 0 elements is created.
   /// \param  None
   /// \throw  None
   cPosition( void );
   
   /// constructor with node input 
   /// \pre    None
   /// \post   An instance of the Position class with 1 element is created.
   /// \param  A node pointer
   /// \throw  None
   cPosition( cNode< Element >* n);

   /// Copy Constructor.
   /// \pre    An instance of Position needs to be present.
   /// \post   Two instances of the same Position will exist.
   /// \param  Vec is the Position to copy from.
   /// \throw  None
   cPosition( const cPosition & from );

   /// Destructor.
   /// \pre    An instance of Position has been created.
   /// \post   The instance of Position is destroyed.
   ~cPosition( void );

// OPERATORS

// OPERATIONS 
   

// ACCESS and MUTATE

   
// INQUIRY
   
   /// element
   /// \pre    There must be an positon to call it on
   /// \post   None
   /// \param  None
   /// \return the element
   Element element( void );
   
   /// isNull
   /// \pre    There must be an positon to call it on
   /// \post   None
   /// \param  None
   /// \return A bool whether or not their is an element
   bool isNull( void);
   
   /// element (const)
   /// \pre    There must be an positon to call it on
   /// \post   None
   /// \param  None
   /// \return the element
   Element element( void ) const;
   
   /// isNull  (const)
   /// \pre    There must be an positon to call it on
   /// \post   None
   /// \param  None
   /// \return A bool whether or not their is an element
   bool isNull( void) const;
   
// MEMBER VARIABLES
private:
   
   //stores the pointer to the position
   cNode< Element > * mPosition;

}; // end of class Position

///////////////////////////////////////////////////////////////////////////////
/// \class        Tree
/// \author       Alex Hortin
/// \date         10/17/05
/// \brief        A stan
///
/// This class is a vector that is built to act just like the standard library
/// vector class.  It was built from a shell given to us by Kelly Fitz.  
///       
/// REVISION HISTORY:
///
///   NONE
///
///////////////////////////////////////////////////////////////////////////////

// SYSTEM INCLUDES
//

// LOCAL INCLUDES
//

// FORWARD REFERENCES
//

// CONSTANTS
//
template < class Element >
class Tree
{
   public:
   typedef cNode<Element> Node;
   typedef cPosition<Element> Position;
   typedef cElementIterator<Element> ElementIterator;
   typedef cPositionIterator<Element> PositionIterator;
// LIFECYCLE

   /// Default constructor.
   /// \pre    None
   /// \post   An instance of the Tree class with 0 elements is created.
   /// \param  None
   /// \throw  None
   Tree( Element e );

   /// Copy Constructor.
   /// \pre    An instance of Tree needs to be present.
   /// \post   Two instances of the same Vec will exist.
   /// \param  Vec is the Tree to copy from.
   /// \throw  None
   Tree( const Tree & from );

   /// Destructor.
   /// \pre    An instance of Tree has been created.
   /// \post   The instance of Tree is destroyed.
   ~Tree( void );

// OPERATORS

   /// Assignment Operator
   /// Provide access to the element at the specified rank.
   /// \pre    there must be a tree to copy
   /// \post   2 copies of the tree will exist
   /// \param  a reference to a tree
   /// \return a reference to a tree
   Tree& operator=( const Tree & rhs );  

// OPERATIONS 

// ACCESS and MUTATE

   /// replaceElement
   /// \pre    There must be a tree to call it on
   /// \post   The Position will be replaced with the element
   /// \param  A position 
   /// \param  An Element
   /// \return None   
   void replaceElement( Position v, Element e);
   
   /// swapElement
   /// \pre    There must be a tree to call it on
   /// \post   The Position will be replaced with the element
   /// \param  A position to swap
   /// \param  A position to swap
   /// \return None   
   void swapElements( Position v,  Position w) ;
   
   /// expandExternal
   /// \pre    There must be a tree to call it on
   /// \post   The Position will be replaced with the element
   /// \param  A position 
   /// \param  An Element
   /// \return None   
   void expandExternal( Position v);
   
   /// removeAboveExternal
   /// \pre    There must be a tree to call it on
   /// \post   The Position will be replaced with the element
   /// \param  A position 
   /// \param  An Element
   /// \return None   
   void removeAboveExternal( Position v);
   
// INQUIRY
  
   /// print
   /// \pre    There must be a tree to call it on
   /// \post   None
   /// \param  None
   /// \return None
   void print(Position v);
   
   /// root
   /// \pre    There must be a tree to call it on
   /// \post   None
   /// \param  None
   /// \return The Position to the root of the tree
   Position root( void ) const;
   
   /// isRoot
   /// \pre    There must be a tree to call it on
   /// \post   None
   /// \param  A position
   /// \return bool if its a root
   bool isRoot( Position& v) const;
   
   /// isExternal
   /// \pre    There must be a tree to call it on
   /// \post   None
   /// \param  A position
   /// \return bool if its external
   bool isExternal(Position& v) const;

   /// isInternal
   /// \pre    There must be a tree to call it on
   /// \post   None
   /// \param  A position
   /// \return bool if its internal
   bool isInternal( Position& v) const;
   
   /// size
   /// \pre    There must be a tree to call it on
   /// \post   None
   /// \param  None
   /// \return the size of a tree
   unsigned int size( void) const ;
   
   /// parent
   /// \pre    There must be a tree to call it on
   /// \post   None
   /// \param  A position
   /// \return the parent of a node   
   Position root( Position& v ) const;
   
   /// leftChild
   /// \pre    There must be a tree to call it on
   /// \post   None
   /// \param  A position
   /// \return the left child of a node   
   Position leftChild( Position& v ) const;
   
   /// rightChild
   /// \pre    There must be a tree to call it on
   /// \post   None
   /// \param  A position
   /// \return the left child of a node   
   Position rightChild( Position& v ) const;
   
   /// sibling
   /// \pre    There must be a tree to call it on
   /// \post   None
   /// \param  A position
   /// \return the position of the parents other child   
   Position rightChild( Position& v ) const;
   
// MEMBER VARIABLES
private:
   Node* mRoot;
   
   unsigned int mSize;

      
}; // end of class Tree

///////////////////////////////////////////////////////////////////////////////
/// \class        Node
/// \author       Alex Hortin
/// \date         10/17/05
/// \brief        A node that makes up part of a tree
///
/// This class is one the stores each individual part of the tree. It stores 
/// a element, a parent pointer, and an array of pointers to all of it's 
/// children. 
///       
/// REVISION HISTORY:
///
///   NONE
///         
///////////////////////////////////////////////////////////////////////////////
#include "Tree.h"                                // class implemented

// SYSTEM INCLUDES
//

// LOCAL INCLUDES
//

// PUBLIC 

// LIFECYCLE 

///////////////////////////////////////////////////////////////////////
/// Default constructor.
/// \pre    None
/// \post   An instance of the Node class is created.
/// \param  None
/// \throw  None
///////////////////////////////////////////////////////////////////////
template < class Element >
cNode< Element >::cNode( void )
{
   mParent = NULL;
}

///////////////////////////////////////////////////////////////////////
/// Copy Constructor.
/// \pre    An instance of Node needs to be present.
/// \post   Two instances of the same Node will exist.
/// \param  Node is the Node to copy from.
/// \throw  None
///////////////////////////////////////////////////////////////////////
template < class Element >
cNode< Element >::cNode( const cNode & from )
{
   mParent = from.mParent;
   mElement = from.mElement;
   mChildren = from.mChildren;
}

///////////////////////////////////////////////////////////////////////
/// Destructor.
/// \pre    An instance of Node has been created.
/// \post   The instance of Node is destroyed.
///////////////////////////////////////////////////////////////////////
template < class Element >
cNode< Element >::~cNode( void )
{
}

// OPERATORS 

// OPERATIONS 

// ACCESS and MUTATE 

// INQUIRY 

// PROTECTED  

// PRIVATE  

///////////////////////////////////////////////////////////////////////////////
/// \class        Position
/// \author       Alex Hortin
/// \date         10/17/05
/// \brief        A class that stores a pointer to the position.
///
/// This class is one the stores a position of a node in the tree.  It is an 
/// interface tool for the client.
///       
/// REVISION HISTORY:
///
///   NONE
///            
///////////////////////////////////////////////////////////////////////////////

// SYSTEM INCLUDES
//

// LOCAL INCLUDES
//

// PUBLIC 

// LIFECYCLE 

///////////////////////////////////////////////////////////////////////
/// Default constructor.
/// \pre    None
/// \post   An instance of the Position class with 0 elements is created.
/// \param  None
/// \throw  None
///////////////////////////////////////////////////////////////////////
template < class Element >
cPosition< Element >::cPosition( void )
{
   this->mPosition = NULL;
}

///////////////////////////////////////////////////////////////////////
/// constructor with node input 
/// \pre    None
/// \post   An instance of the Position class with 1 element is created.
/// \param  A node pointer
/// \throw  None
///////////////////////////////////////////////////////////////////////
template < class Element >
cPosition< Element >::cPosition( cNode< Element > * n)
{
   this->mPosition = n;
}

///////////////////////////////////////////////////////////////////////
/// Copy Constructor.
/// \pre    An instance of Position needs to be present.
/// \post   Two instances of the same Position will exist.
/// \param  Vec is the Position to copy from.
/// \throw  None
///////////////////////////////////////////////////////////////////////
template < class Element >
cPosition< Element >::cPosition( const cPosition & from )
{
   this->mPosition = from.mPosition;
}

///////////////////////////////////////////////////////////////////////
/// Destructor.
/// \pre    An instance of Position has been created.
/// \post   The instance of Position is destroyed.
///////////////////////////////////////////////////////////////////////
template < class Element >
cPosition< Element >::~cPosition( void )
{
}

// OPERATORS 

// OPERATIONS 

// ACCESS and MUTATE 

// INQUIRY 

///////////////////////////////////////////////////////////////////////
/// element
/// \pre    There must be an positon to call it on
/// \post   None
/// \param  None
/// \return the element
///////////////////////////////////////////////////////////////////////
template < class Element >
Element cPosition< Element >::element( void )
{
   if (mPosition == NULL)
   {
      throw std::out_of_range("OMFG WTFBBQ PWNT");
   }
   return (mPosition->mElement);
}

///////////////////////////////////////////////////////////////////////
/// isNull
/// \pre    There must be an positon to call it on
/// \post   None
/// \param  None
/// \return A bool whether or not their is an element
///////////////////////////////////////////////////////////////////////
template < class Element >
bool cPosition< Element >::isNull( void )
{
   return (mPosition == NULL);
}

///////////////////////////////////////////////////////////////////////
/// element (const)
/// \pre    There must be an positon to call it on
/// \post   None
/// \param  None
/// \return the element
///////////////////////////////////////////////////////////////////////
template < class Element >
Element cPosition< Element >::element( void ) const
{
   if (mPosition == NULL)
   {
      throw std::out_of_range("OMFG WTFBBQ PWNT");
   }
   return (mPosition->mElement);
}

///////////////////////////////////////////////////////////////////////
/// isNull(const)
/// \pre    There must be an positon to call it on
/// \post   None
/// \param  None
/// \return A bool whether or not their is an element
///////////////////////////////////////////////////////////////////////
template < class Element >
bool cPosition< Element >::isNull( void ) const
{
   return (mPosition == NULL);
}

// PROTECTED  

// PRIVATE  


///////////////////////////////////////////////////////////////////////////////
/// \class        Tree
/// \author       Alex Hortin
/// \date         10/17/05
/// \brief        A stan
///
/// This class is a vector that is built to act just like the standard library
/// vector class.  It was built from a shell given to us by Kelly Fitz.  
///       
/// REVISION HISTORY:
///
///   NONE
///         
///////////////////////////////////////////////////////////////////////////////

// SYSTEM INCLUDES
//

// LOCAL INCLUDES
//

// PUBLIC 

// LIFECYCLE 

///////////////////////////////////////////////////////////////////////////////
/// Default constructor.
/// \pre    None
/// \post   An instance of the Tree class with 0 elements is created.
/// \param  None
/// \throw  None
///////////////////////////////////////////////////////////////////////////////
template < class Element >
Tree< Element >::Tree( Element e )
{
   mSize = 1;
   mRoot = new Node;
   mRoot->mParent = NULL;
   mRoot->mElement = e;

}

///////////////////////////////////////////////////////////////////////////////
/// Copy Constructor.
/// \pre    An instance of Tree needs to be present.
/// \post   Two instances of the same Vec will exist.
/// \param  Vec is the Tree to copy from.
/// \throw  None
///////////////////////////////////////////////////////////////////////////////
template < class Element >
Tree< Element >::Tree( const Tree & from )
{

}

///////////////////////////////////////////////////////////////////////////////
/// Destructor.
/// \pre    An instance of Tree has been created.
/// \post   The instance of Tree is destroyed.
///////////////////////////////////////////////////////////////////////////////
template < class Element >
Tree< Element >::~Tree( void )
{
   
}

// OPERATORS

///////////////////////////////////////////////////////////////////////////////
/// Assignment Operator
/// Provide access to the element at the specified rank.
/// \pre    there must be a tree to copy
/// \post   2 copies of the tree will exist
/// \param  a reference to a tree
/// \return a reference to a tree
///////////////////////////////////////////////////////////////////////////////
template < class Element >
Tree< Element >& Tree< Element >::operator=( const Tree & rhs )
{ 
   
}

// OPERATIONS 


// ACCESS and MUTATE

///////////////////////////////////////////////////////////////////////////////
/// replaceElement
/// \pre    There must be a tree to call it on
/// \post   The Position will be replaced with the element
/// \param  A position 
/// \param  An Element
/// \return None   
///////////////////////////////////////////////////////////////////////////////
template < class Element >
void Tree< Element >::replaceElement(Position v, Element e) 
{
   if (v.isNull())
   {
      throw std::out_of_range("OMFG WTFBBQ PWNT");
   }
   v.mPosition->mElement = e;
}

///////////////////////////////////////////////////////////////////////////////
/// swapElement
/// \pre    There must be a tree to call it on
/// \post   The Position will be replaced with the element
/// \param  A position to swap
/// \param  A position to swap
/// \return None   
///////////////////////////////////////////////////////////////////////////////
template < class Element >
void Tree< Element >::swapElements(Position v, Position w) 
{

}
///////////////////////////////////////////////////////////////////////////////
/// expandExternal
/// \pre    There must be a tree to call it on
/// \post   The Position will be replaced with the element
/// \param  A position 
/// \param  An Element
/// \return None   
///////////////////////////////////////////////////////////////////////////////
template < class Element >
void Tree< Element >::expandExternal( Position v)
{
}

///////////////////////////////////////////////////////////////////////////////
/// removeAboveExternal
/// \pre    There must be a tree to call it on
/// \post   The Position will be replaced with the element
/// \param  A position 
/// \param  An Element
/// \return None   
///////////////////////////////////////////////////////////////////////////////
template < class Element >
void Tree< Element >::removeAboveExternal( Position v)
{
}

// INQUIRY
///////////////////////////////////////////////////////////////////////////////
/// print
/// \pre    There must be a tree to call it on
/// \post   None
/// \param  None
/// \return The Position to the root of the tree
///////////////////////////////////////////////////////////////////////////////
template < class Element >
void Tree< Element >::print(Position v)
{

}

///////////////////////////////////////////////////////////////////////////////
/// root
/// \pre    There must be a tree to call it on
/// \post   None
/// \param  None
/// \return The Position to the root of the tree
///////////////////////////////////////////////////////////////////////////////
template < class Element >
typename Tree< Element >::Position Tree< Element >::root( void ) const
{
   Position root_temp;
   root_temp.mPosition = mRoot;
   return root_temp;
}

///////////////////////////////////////////////////////////////////////////////
/// isRoot
/// \pre    There must be a tree to call it on
/// \post   None
/// \param  A position
/// \return bool if its a root
///////////////////////////////////////////////////////////////////////////////
template < class Element >
bool Tree< Element >::isRoot(Position& v) const
{
   if (v.isNull())
   {
      throw std::out_of_range("OMFG WTFBBQ PWNT");
   }
   return (v.mPosition == mRoot);
}

///////////////////////////////////////////////////////////////////////////////
/// isExternal
/// \pre    There must be a tree to call it on
/// \post   None
/// \param  A position
/// \return bool if its external
///////////////////////////////////////////////////////////////////////////////
template < class Element >
bool Tree< Element >::isExternal(Position& v) const
{
   if (v.isNull())
   {
      throw std::out_of_range("OMFG WTFBBQ PWNT");
   }
   return (v.mPosition->mChildren.size() == 0);
}

///////////////////////////////////////////////////////////////////////////////
/// isInternal
/// \pre    There must be a tree to call it on
/// \post   None
/// \param  A position
/// \return bool if its internal
///////////////////////////////////////////////////////////////////////////////
template < class Element >
bool Tree< Element >::isInternal(Position& v) const
{
   if (v.isNull())
   {
      throw std::out_of_range("OMFG WTFBBQ PWNT");
   }
   return (v.mPosition->mChildren.size() != 0);
}

///////////////////////////////////////////////////////////////////////////////
/// size
/// \pre    There must be a tree to call it on
/// \post   None
/// \param  None
/// \return the size of a tree
///////////////////////////////////////////////////////////////////////////////
template < class Element >
unsigned int Tree< Element >::size( void ) const
{
   return mSize;
}

///////////////////////////////////////////////////////////////////////////////
/// parent
/// \pre    There must be a tree to call it on
/// \post   None
/// \param  A position
/// \return the parent of a node   
///////////////////////////////////////////////////////////////////////////////
template < class Element >
typename Tree< Element >::Position Tree< Element >::parent( const Position& v) const
{
   if (v.isNull())
   {
      throw std::out_of_range("OMFG WTFBBQ PWNT");
   }
   Tree::Position p;
   p.mPosition = (v.mPosition->mParent);
   return p;
   
}


// PROTECTED  

// PRIVATE  
