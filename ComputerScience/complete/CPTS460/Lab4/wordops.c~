//get_word uses get byte (implemented by kc) to retrieve a certain byte and combine it to return a word
unsigned short get_word(segment, offset) unsigned short segment; unsigned short offset;
{
	char hi=0x00;
	char low=0x00;//8 bit vars to store the high and low bits of the word
	unsigned short totalword = 0x00;//another variable to store the total word after retrieving
	hi = get_byte( segment, offset+1);
	low = get_byte( segment, offset);
	totalword += hi;
	totalword*= 256;//shifting the high byte into proper position
	totalword+=(unsigned short)(low);//making sure that the totalword includes low
	return totalword; //returns the total word back to the user
}

//put_word uses put byte (implemented by kc) to put a certain
unsigned short put_word(w,segment, offset) unsigned short segment; unsigned short offset;
{
	char hi=0x00; //higher 8 bits of the word
	char low=0x00; //lower 8 bits of the word
	hi = ((w & 0xFF00)/256);//getting the high byte than shifting it
	low = (w & 0x00FF);//seperating the word
	put_byte(low,segment,offset);//adding the bytes to proper segment
	put_byte(hi,segment,offset+1);
	return 1;//1 for SUCCESS!
}
copyImage(parent,child) ushort parent; ushort child;
{
	int i = 0;
	for (i=0;i < 65536;i++)//64k to copy the whoe segment 
	{
		putbyte(getbyte(parent,i),child,i);
	}
}




/***********************************************************
  kfork() creates a child proc and returns the child pid.
  When scheduled to run, the child process resumes to body();
************************************************************/
int ufork()
{
  PROC *p;
  int  i, child;
  ushort  segment;

	/////////////////////////////////
  ushort curUserSeg; //this is where i store the current processes copy adress
	/////////////////////////////////

  /*** get a PROC for child process: ***/
  if ( (p = getproc()) == NULL){
       printf("no more proc\n");
       return(-1);
  }

  /* initialize the new proc and its stack */
  p->status = READY;
  p->ppid = running->pid;
  p->parent = running;
  p->pri  = 1;                 // all of the same priority 1


  // clear all SAVed registers on stack
  for (i=1; i<10; i++)
      p->kstack[SSIZE-i] = 0;
 
  // fill in resume address
  p->kstack[SSIZE-1] = (int)body;

  // save stack TOP address in PROC
  p->ksp = &(p->kstack[SSIZE - 9]);

  /* initialize the new proc and its stack */
  p->status = READY;
  p->pid = nproc;
  p->ppid = running->pid;
  p->parent = running;
  p->pri  = 1;                 // all of the same priority 1

  // clear all SAVed registers on stack
  for (i=1; i<10; i++)
      p->kstack[SSIZE-i] = 0;
 
  // fill in resume address
  p->kstack[SSIZE-1] = (int)body;

  // save stack TOP address in PROC
  p->ksp = &(p->kstack[SSIZE - 9]);

  segment = (p->pid+1)*0x1000;//setting the segment based on the process id running
  
/////////////////////////////
  curUserSeg = (running->pid+1)*0x1000;//this is to find the current user seg
///////////////////////////  

//load("/bin/u1", segment);//loading the default memory into the segment
copyImage(curUserSeg,segment);
  printf("...creating a copy of u img for running process process %d at segment = %x\n",p->pid, segment );
  /***** Fill in U mode information in proc *********************
        12  11  10  9   8   7   6   5   4   3   2   1  |xxxxxxx
        DS  ES  di  si  bp  dx  cx  bx  ax  PC  CS  flag |
       seg seg  0   0   0   0   0   0   0   0   seg 0x0200
        | 
       usp
  **************************************************************/
 	
   for (i=1; i<=12; i++){
       put_word(0, segment, -2*i);//zeroing out the stack
   }

   put_word(0x0200,  segment, -2*1);   /* flag */  
   put_word(segment, segment, -2*2);   /* uCS */
   put_word(segment, segment, -2*11);  /* uES */
   put_word(segment, segment, -2*12);  /* uDS */

   p->usp = -2*12; 
   p->uss = segment;

  enqueue(p);
  nproc++;

  // ADD CODE TO create a Umode image of the new process
  
  printf("Proc %d forked a child %d at segment=%d\n",
          running->pid, p->pid, segment);

  return(p->pid);
}

